{
  "Body": "Vinay is obsessed with palindromes. A palindrome is a word or phrase that reads the same backward as forward. For example:\nracecar is a palindrome since “racecar” spelled in reverse is “racecar”. Vinay knows verifying palindromes is a straightforward\nprocess, but Vinay wants to up the ante, and try to determine if the letters or numeric characters in any word or phrase can be\nrearranged such that it forms a palindrome. If the word or phrase can be rearranged to form a palindrome, Vinay wants to know\nhow many distinct palindromes can be formed. For example, looking at the word racecar, the word can be rearranged such that\nsix palindromes are formed:\n\n<ol><li>acrerca<i>\n<li>arcecra<i>\n<li>carerac<i>\n<li>craearc<i>\n<li>racecar<i>\n<li>rcaeacr</li></ol>\n\nVinay needs your help writing a program that will not only determine if any given phrase, with all non-alphabetic and all nonnumeric characters removed, can be used to form a palindrome, and if so, how many distinct palindrome(s) can be formed.\nThink you can help?",
  "Input": "Input will consist of an integer N, the number of test cases. N will be in range [1,30]. The following N lines will contain\na word, or phrase, of which you are to determine how many distinct palindromes can be formed from the word or phrase when\nall non-alphabetic and all non-numeric characters are removed. Each test case will be guaranteed to be of length [1, 30]\ncharacters.",
  "Output": "For each input case, you are to output the original word or phrase followed by: “can not be rearranged to\nform a palindrome.” if it is not possible to form a palindrome from the input, or “can be rearranged to form\nX distinct palindrome(s).” where X is the calculated number of distinct palindromes that can be formed from the\ninput when all non-alphabetic and non-numeric characters are removed."
}