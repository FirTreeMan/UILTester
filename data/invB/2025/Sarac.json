{
  "Body": "Sarac is learning about Mutual Exclusion and Deadlocks which are common problems in Multi-Threaded programs and an issue\nthat Operating System Engineers are constantly forced to address. For a resource to be considered “Mutually Exclusive”, then at\nmost one process or program is allowed to access that resource at any single point in time. In other words, no two processes can\nshare the resource at the same time, but multiple processes may hold the resource independently over a period of time.\n\nSince a single process may be interested in holding multiple such shared resources that need to be accessed mutually exclusively\nat a single instance of time, it is possible for a “Deadlock” to occur. Consider the example graph below – since both <i>P</i><sub>1</sub> and <i>P</i><sub>2</sub>\nare waiting on a resource held by the other, and neither is able to release their resource until they have obtained all resources\nthey are interested in, a Deadlock has formed since neither process can continue.\n\n<img/>\n\nOne such way of modeling these systems is through a structure known as a Resource Allocation Graph (RAG). This is a\nbipartite graph where a directed edge from a resource \uD835\uDC45, to a process <i>P</i>, exists if and only if resource \uD835\uDC45 is held by process, <i>P</i>.\nSimilarly, there exists a directed edge from a process <i>P</i>, to a resource \uD835\uDC45, if and only if process <i>P</i> is interested in holding resource\n\uD835\uDC45. No other edges exist in the graph outside of these two types. Using this model, Sarac is able to detect the occurrence (or\nabsence) of Deadlocks in a given system. Given a RAG, help Sarac detect the occurrence or absence of a Deadlock in the RAG.",
  "Input": "The first line of input will consist of a single integer <i>n</i>, 1 ≤ <i>n</i> ≤ 20, denoting the number of test cases to follow. Each\ntest case will begin with a line denoting two space-separated integers <i>V</i>, 4 ≤ <i>V</i> ≤ 10<sup>5</sup>\n, denoting the number of vertices and <i>E</i>,\n2 ≤ <i>E</i> ≤ 10<sup>5</sup>\n, denoting the number of edges in the RAG. The next line will consist of <i>V</i> space-separated strings denoting the\nlabels of <i>V</i> vertices in the graph, each of which will either be in the form of \"Pi\" or \"Ri\", where i is some integer 1 ≤ <i>i</i> ≤ <i>V</i>.\nThe next line will consist of <i>E</i> space-separated edges, each of which will either be in the form of \"Pi->Ri\" indicating that Pi is\ninterested in holding Ri, or \"Ri->Pi\" indicating that Ri is held by Pi. It is guaranteed that all labels among the edges exist\namong the <i>V</i> vertices provided, and all edges adhere to the rules described above.",
  "Output": "For each of Sarac’s <i>n</i> requests, either print the string \"Deadlock free; all is well\" if the RAG does not\ncontain a Deadlock or the string \"Deadlock exists; not good...\" if the RAG contains a Deadlock."
}