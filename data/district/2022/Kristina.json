{
  "Body": "Kristina has been studying prefix and postfix notation for arithmetic expressions and has asked you to create a combination\nprefix/postfix calculator program that will check her manual evaluation of expressions of those forms.\nPrefix notation places operators before their operands and operations have to be delayed until two operands are available.\nConsider the prefix example: <b>+ - * 7 5 - 9 6 -5</b>\n\n\t<b>* 7 5</b> is 7 * 5 = 35\n\t<b>- 9 6</b> is 9 − 6 = 3\n\t<b>- 35 3</b> is 35 − 3 = 32\n\t<b>+ 32 -5</b> is 32 + -5 = 27\n\nPostfix places operators after their operands which means the needed operands are available as soon as an operator is\nencountered. Consider the postfix example: <b>7 5 * 9 6 - - -5 +</b>\n\n\t<b>7 5 *</b> is 7 * 5 = 35\n\t<b>9 6 –</b> is 9 − 6 = 3\n\t<b>35 3 –</b> is 35 − 3 = 32\n\t<b>32 -5 +</b> is 32 + -5 = 27\n\nKristina wants to work with only integers and wants to use ^ as an exponent operator. For example, 2 <b>^</b> 5 is 32.\n\nCan you create the program for Kristina?",
  "Input": "First line of data file contains a positive integer T, the number of test cases that follow with 1 ≤ T ≤ 25. The following T\nlines will start with either “PRE” for a prefix expression or “POST” for a postfix expression. Those will be followed by a single\nspace and a properly formed expression of the indicated notation. The combination of operators (^, *, /, +, and −) and integers,\nN, will be separated by single spaces with −100 ≤ N ≤ 100. However, exponent and other operations are guaranteed to not result\nin values that exceed a standard Java integer. Expressions are also guaranteed to not result in division by 0. Length of lines will\nnot exceed 200 characters.",
  "Output": "For each test case, display the resulting integer value."
}