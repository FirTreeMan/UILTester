{
  "Body": "Leah is rather fond of expressing numbers in different bases. In particular, Leah has a real affinity for binary numbers. As such,\nshe already has a good understanding of what binary numbers are, and how to read them. In most cases, when generating binary\nnumbers, binary numbers are ordered from least to greatest. For example, the following is a list of the binary representation of\nthe numbers 0 through 7 which are expressed to 3 bits:\n\n<img/>\n\nLeah in her Digital Logic class was recently introduced to Gray Codes, which are an alternative way to order binary numbers.\nRather than simply adding one to the previous binary number to generate the next binary number, Gray Codes order binary\nnumbers according to the simple principle that no two adjacent numbers can differ by more than a single bit. The following is\nthe order of the first 8 Gray Codes expressed to 3 bits:\n\n<img/>\n\nHowever, generating Gray Codes can be decently difficult to do so by hand. Help Leah by writing her a program that generates\nGray Codes for different bit widths.",
  "Input": "The first line of input will consist of a single integer <i>n</i> (1 ≤ <i>n</i> ≤ 32) denoting the number of testcases to follow. The\nnext <i>n</i> lines will each contain a single integer <i>w<sub>n</sub></i> (1 ≤ <i>w<sub>n</sub></i> ≤ 8) denoting the width of any given binary number that Leah wants\nto generate.",
  "Output": "For each of Leah’s <i>n</i> requests, on their own line, print a space-separated list of the decimal representation of the\nnumbers 0 through 2<sup><i>w<sub>n</sub></i></sup> − 1 in their Gray Codes ordering."
}