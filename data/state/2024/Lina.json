{
  "Body": "You and Lina have a Binary Search Tree project due tomorrow, but you haven’t started! Quick, write a program to take in a list\nof strings, make a binary search tree based on that list, and find the diameter, width, height, and number of leaves in the tree.\nThe definitions of these terms are as follows:\n<ul><li>Diameter – The length (number of connections) of the longest path between 2 nodes in the binary search tree.</li><li>Width – The number of nodes in the largest layer of the tree (which level has the most nodes, how many nodes).</li><li>Height – The length (number of connections) of the path from the root of the tree to the lowest node.</li><li>Number of leaves – Leaves are nodes in the tree with no children, find out how many there are.</li></ul>\nDuplicate values should be treated as less than and sent to the left subtree.",
  "Input": "The input will begin with an integer, n (0 < n <= 1000), denoting the number of test cases to follow. Each test case\nwill consist of a list of space separated strings of unknown length to be put into the binary search tree. Put the strings into the\ntree in the order they are given. These strings will not contain any punctuation.",
  "Output": "First output the string \"TEST CASE #n:\", where n is replaced with the number of the test case, starting at 1. Then,\non the following line, output the string \"DIAMETER OF THE TREE: \", followed by the integer diameter of the created\nbinary tree. Then, on the following line, output the string \"WIDTH OF THE TREE: \", followed by the integer width of the\ncreated binary tree. Then, on the following line, output the string \"HEIGHT OF THE TREE: \", followed by the integer\nheight of the created binary tree. Then, on the following line, output the string \"NUMBER OF LEAVES IN THE TREE: \",\nfollowed by the integer number of leaves in the created binary tree."
}