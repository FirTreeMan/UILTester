{
  "Body": "Nicholas is a highly involved student when it comes to his extracurriculars – so much so that he has accidentally overcommitted\nhimself! Looking to remedy this issue, Nicholas is interested in selecting a subset of the current activities that he is involved in,\nsuch that this new subset maximizes his happiness while avoiding the issue of overcommitting himself. However, wanting to be\nable to devote as much attention as possible to those events, he wishes to those events for their entire duration and is not allowed\nto leave mid-way through an event.\n\n<img/>\n\nBecause of the sheer quantity of events that he is involved in, as well as the difficult decisions that such an issue might lead to,\nNicholas wishes to automate this process of choosing which events to continue participating in. Help Nicholas determine which\nsubset of events that he is currently involved in, he should continue to participate in. The figure below is what such a selection\nof events would look like, which maximizes the value that Nicholas can obtain from the events described in the figure above,\nwith the selected events being shaded darker than the unselected ones.\n\n<img/>\n\nAssume that Nicholas has super-human speed and can travel from one event to another in an instant.",
  "Input": "The first line of input will consist of a single integer <i>n</i> (1 ≤ <i>n</i> ≤ 10) denoting the number of testcases to follow. The\nnext <i>n</i> testcases will consist of two lines. The first line will consist of a single integer, <i>m</i>, denoting the number of events that are\nto follow. The next line will consist of a single string denoting the list of <i>m</i> start times (<i>s<sub>i</sub></i>), finish times (<i>f<sub>i</sub></i>), and values (<i>v<sub>i</sub></i>) that\na particular event (<i>e<sub>i</sub></i>) is composed of. Unique events will be separated by a single comma (the string “,”), with the start time,\nfinish time, and value of a particular event each being separated by a single space (the string “ ”). While not explicitly denoted\nin the input, events are numbered 1 through <i>m</i>, with 1 being assigned to the first event that appears in the input, 2 being assigned\nto the second event, and <i>m</i> being assigned to the <i>last</i> event. It is guaranteed that <i>s<sub>i</sub></i>, <i>f<sub>i</sub></i>, and <i>v<sub>i</sub></i> are all integers, as well as 0 ≤\n<i>s<sub>i</sub></i> < <i>f<sub>i</sub></i> ≤ 10<sup>5</sup>\n, and\n1 ≤ <i>v<sub>i</sub></i> ≤ 10<sup>4</sup>\n. Lastly, it should be noted that 1 ≤ <i>m</i> ≤ 200.",
  "Output": "For each of Nicholas’ <i>n</i> requests, on its own line, print the list of events that he should attend which maximize the\nhappiness that attending those events will bring him. This list should be printed as a single line of space-separated integers\nwhich represent the event numbers of the events that Nicholas should attend sorted by start time. It is guaranteed that there is a\nsingle optimal solution."
}