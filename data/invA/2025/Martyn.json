{
  "Body": "Martyn’s two favorite things that he learned in his Computer Science class are Palindromes and Numeric Bases… why not\ncombine the two? Martyn is interested in knowing, among a list of bases, which bases, if any, a given unsigned integer is\npalindromic in. Help Martyn in writing a program to list out those such bases.",
  "Input": "The first line of input will consist of a single integer <i>n</i> (1 ≤ <i>n</i> ≤ 2.5 ⋅ 10<sup>5</sup>\n) denoting the number of test cases. The next\n<i>n</i> test cases will consist of a single unsigned integer <i>m<sub>i</sub></i> (for all <i>i</i>, 1 ≤ <i>i</i> ≤ <i>n</i>: 0 ≤ <i>m<sub>i</sub></i> ≤ 2<sup>31</sup> − 1), denoting the <i>i</i><sup>th</sup> number that\nMartyn is interested in checking.",
  "Output": "For each of Martyn’s <i>n</i> requests, print out a comma-and-space-separated list of the bases which a given request <i>m<sub>i</sub></i>\nis\npalindromic in, or the string \"None.\" if there are none. Note that a valid solution should consider all integer bases starting from\nbase 2 and up until base 64. For the sake of simplicity (traditionally, bases after 36 break this rule), you may assume that a given\nbase <i>b</i> uses the first <i>b</i> symbols from the following alphabet:\n\n\t0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/\n\nWhen converting to a given base <i>b</i>, you should express the number to its minimal width. That is, if a number <i>m<sub>i</sub></i> can be\nrepresented with a minimum of <i>k</i> characters, then disregard whether the number may be palindromic for any equivalent padded\nversion of that string with more than <i>k</i> characters. Moreover, for bases like base 64 which traditionally prepend '='s to pad a\nnumber out to a certain width, disregard the need for such padding."
}